{"version":3,"sources":["recoil/atoms/mapAtoms.js","components/KakaoMap.js","components/RNListener.js","App.js","reportWebVitals.js","index.js"],"names":["mapAtoms","locationState","atom","key","default","latitude","longitude","keywordState","keyword","kakao","window","Container","styled","div","KaKaoMap","location","useRecoilValue","keywordFromRN","useState","map","setCurrentMap","ps","setPs","infoWindow","setInfoWindow","markers","useEffect","container","document","getElementById","options","center","maps","LatLng","level","Map","services","Places","InfoWindow","zIndex","searchPlaces","value","replace","alert","keywordSearch","placesSearchCB","data","status","pagination","Status","OK","ReactNativeWebView","postMessage","JSON","stringify","type","message","displayPlaces","i","paginationEl","fragment","createDocumentFragment","hasChildNodes","removeChild","lastChild","last","el","createElement","href","innerHTML","current","className","onclick","gotoPage","appendChild","displayPagination","ZERO_RESULT","ERROR","places","listEl","menuEl","bounds","LatLngBounds","removeAllChildNods","length","setMap","removeMarker","placePosition","y","x","marker","addMarker","itemEl","getListItem","extend","title","event","addListener","displayInfowindow","close","onmouseover","onmouseout","place_name","scrollTop","setBounds","index","itemStr","road_address_name","address_name","phone","position","idx","imageSize","Size","imgOptions","spriteSize","spriteOrigin","Point","offset","markerImage","MarkerImage","Marker","image","push","content","setContent","open","id","style","height","width","overflow","onSubmit","size","RNListener","children","useRecoilState","setLocation","setKeyword","addEventListener","listener","removeEventListener","console","log","parse","Fragment","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"8PAiBaA,EAAW,CACpBC,cAhBkBC,YAAK,CACvBC,IAAK,gBACLC,QAAS,CACLC,SAAU,kBACVC,UAAW,sBAafC,aATiBL,YAAK,CACtBC,IAAK,eACLC,QAAS,CACLI,QAAS,mB,eCNVC,EAASC,OAATD,MA0QDE,EAAYC,IAAOC,IAAV,+DAKAC,EA7QE,WACb,IAAMC,EAAWC,YAAehB,EAASC,eACnCgB,EAAgBD,YAAehB,EAASO,cAF3B,EAGUW,qBAHV,mBAGZC,EAHY,KAGPC,EAHO,OAICF,qBAJD,mBAIZG,EAJY,KAIRC,EAJQ,OAKiBJ,qBALjB,mBAKZK,EALY,KAKAC,EALA,KAOfC,EAAU,GAGdC,qBAAU,WACN,IAAIC,EAAYC,SAASC,eAAe,OACxC,GAAIpB,EAAO,CACP,IAAIqB,EAAU,CACVC,OAAQ,IAAItB,EAAMuB,KAAKC,OAAOlB,EAASV,SAAUU,EAAST,WAC1D4B,MAAO,GAEXd,EAAc,IAAIX,EAAMuB,KAAKG,IAAIR,EAAWG,IAC5CR,EAAM,IAAIb,EAAMuB,KAAKI,SAASC,QAC9Bb,EAAc,IAAIf,EAAMuB,KAAKM,WAAW,CAACC,OAAQ,QAEtD,CAAC9B,IAEJiB,qBAAU,WACFL,GACAmB,MAEL,CAACnB,IAEJ,IAAMmB,EAAe,WAEjB,IAAIhC,EAAUoB,SAASC,eAAe,WAAWY,MAEjD,IAAKjC,EAAQkC,QAAQ,aAAc,IAE/B,OADAC,MAAM,mEACC,EAIXtB,EAAGuB,cAAcpC,EAASqC,IAGxBA,EAAiB,SAACC,EAAMC,EAAQC,EAAYzB,GAC9C,GAAIwB,IAAWtC,EAAMuB,KAAKI,SAASa,OAAOC,GAItCxC,OAAOyC,mBAAmBC,YACtBC,KAAKC,UAAU,CACXC,KAAM,YACNC,QAASV,KAGjBW,EAAcX,GAkItB,SAA2BE,GACvB,IAEIU,EAFAC,EAAe/B,SAASC,eAAe,cACvC+B,EAAWhC,SAASiC,yBAIxB,KAAOF,EAAaG,iBAChBH,EAAaI,YAAYJ,EAAaK,WAG1C,IAAKN,EAAI,EAAGA,GAAKV,EAAWiB,KAAMP,IAAK,CACnC,IAAIQ,EAAKtC,SAASuC,cAAc,KAChCD,EAAGE,KAAO,IACVF,EAAGG,UAAYX,EAEXA,IAAMV,EAAWsB,QACjBJ,EAAGK,UAAY,KAEfL,EAAGM,QAAW,SAAUd,GACpB,OAAO,WACHV,EAAWyB,SAASf,IAFd,CAIXA,GAGPE,EAASc,YAAYR,GAEzBP,EAAae,YAAYd,GA1JrBe,CAAkB3B,OAEf,IAAID,IAAWtC,EAAMuB,KAAKI,SAASa,OAAO2B,YAG7C,YADAjC,MAAM,sFAGH,GAAII,IAAWtC,EAAMuB,KAAKI,SAASa,OAAO4B,MAG7C,YADAlC,MAAM,+FAMRc,EAAgB,SAACqB,GAEnB,IAAIC,EAASnD,SAASC,eAAe,cACjCmD,EAASpD,SAASC,eAAe,aACjC+B,EAAWhC,SAASiC,yBACpBoB,EAAS,IAAIxE,EAAMuB,KAAKkD,cAmJhC,SAA4BhB,GACxB,KAAOA,EAAGJ,iBACNI,EAAGH,YAAYG,EAAGF,WAjJtBmB,CAAmBJ,GA+FvB,WACI,IAAK,IAAIrB,EAAI,EAAGA,EAAIjC,EAAQ2D,OAAQ1B,IAChCjC,EAAQiC,GAAG2B,OAAO,MAEtB5D,EAAU,GAhGV6D,GAEA,IAd8B,eAcrB5B,GAGL,IAAI6B,EAAgB,IAAI9E,EAAMuB,KAAKC,OAAO6C,EAAOpB,GAAG8B,EAAGV,EAAOpB,GAAG+B,GAC7DC,EAASC,EAAUJ,EAAe7B,GAClCkC,EAASC,EAAYnC,EAAGoB,EAAOpB,IAInCuB,EAAOa,OAAOP,GAKd,SAAWG,EAAQK,GACftF,EAAMuB,KAAKgE,MAAMC,YAAYP,EAAQ,aAAa,WAC9CQ,EAAkBR,EAAQK,MAG9BtF,EAAMuB,KAAKgE,MAAMC,YAAYP,EAAQ,YAAY,WAC7CnE,EAAW4E,WAGfP,EAAOQ,YAAc,WACjBF,EAAkBR,EAAQK,IAG9BH,EAAOS,WAAa,WAChB9E,EAAW4E,SAdnB,CAgBGT,EAAQZ,EAAOpB,GAAG4C,YAErB1C,EAASc,YAAYkB,IAhChBlC,EAAI,EAAGA,EAAIoB,EAAOM,OAAQ1B,IAAM,EAAhCA,GAoCTqB,EAAOL,YAAYd,GACnBoB,EAAOuB,UAAY,EAGnBpF,EAAIqF,UAAUvB,IAKZY,EAAc,SAACY,EAAO3B,GAExB,IAAIZ,EAAKtC,SAASuC,cAAc,MAC5BuC,EAAU,iCAAmCD,EAAQ,GAA3C,qCAEM3B,EAAOwB,WAAa,QAexC,OAbIxB,EAAO6B,kBACPD,GAAW,aAAe5B,EAAO6B,kBAAtB,sCAC0B7B,EAAO8B,aAAe,UAE3DF,GAAW,aAAe5B,EAAO8B,aAAe,UAGpDF,GAAW,uBAAyB5B,EAAO+B,MAAhC,gBAGX3C,EAAGG,UAAYqC,EACfxC,EAAGK,UAAY,OAERL,GAILyB,EAAY,SAACmB,EAAUC,EAAKhB,GAC9B,IACIiB,EAAY,IAAIvG,EAAMuB,KAAKiF,KAAK,GAAI,IACpCC,EAAa,CACTC,WAAY,IAAI1G,EAAMuB,KAAKiF,KAAK,GAAI,KACpCG,aAAc,IAAI3G,EAAMuB,KAAKqF,MAAM,EAAU,GAANN,EAAY,IACnDO,OAAQ,IAAI7G,EAAMuB,KAAKqF,MAAM,GAAI,KAErCE,EAAc,IAAI9G,EAAMuB,KAAKwF,YAPlB,kFAOwCR,EAAWE,GAC9DxB,EAAS,IAAIjF,EAAMuB,KAAKyF,OAAO,CAC3BX,SAAUA,EACVY,MAAOH,IAMf,OAHA7B,EAAOL,OAAOlE,GACdM,EAAQkG,KAAKjC,GAENA,GA4CX,IAAMQ,EAAoB,SAACR,EAAQK,GAC/B,IAAI6B,EAAU,uCAAyC7B,EAAQ,SAE/DxE,EAAWsG,WAAWD,GACtBrG,EAAWuG,KAAK3G,EAAKuE,IAUzBhE,qBAAU,cAEP,CAACT,EAAeA,IAUnB,OACI,cAACN,EAAD,CAAWoH,GAAG,MAAd,SACI,sBAAKxD,UAAU,WAAf,UACI,qBAAKwD,GAAG,MAAMC,MAAO,CAACC,OAAQ,OAAQC,MAAO,OAAQpB,SAAU,WAAYqB,SAAU,YAErF,sBAAKJ,GAAG,YAAYxD,UAAU,WAAWyD,MAAO,CAACzF,OAAQ,IAAzD,UACI,qBAAKgC,UAAU,SAAf,SACI,8BACI,uBAAM6D,SAAS,gCAAf,kCACU,uBAAO7E,KAAK,OAAOd,MAAM,kCAASsF,GAAG,UAAUM,KAAK,OAC1D,wBAAQ9E,KAAK,SAAb,6CAIZ,uBACA,oBAAIwE,GAAG,eACP,qBAAKA,GAAG,wBCnOZO,EAnCG,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,EAECC,YAAexI,EAASC,eAFzB,mBAEdwI,GAFc,aAGDD,YAAexI,EAASO,cAHvB,mBAGfmI,GAHe,WAI/BhH,qBAAU,WAON,OANIhB,OAAOyC,qBAEPvB,SAAS+G,iBAAiB,UAAWC,GAErClI,OAAOiI,iBAAiB,UAAWC,IAEhC,WACHhH,SAASiH,oBAAoB,UAAWD,GACxClI,OAAOmI,oBAAoB,UAAWD,MAE5C,IAEF,IAAMA,EAAW,SAAC5C,GACd8C,QAAQC,IAAI1F,KAAK2F,MAAMhD,EAAMlD,OADL,MAEDO,KAAK2F,MAAMhD,EAAMlD,MAAhCA,EAFgB,EAEhBA,KAAMS,EAFU,EAEVA,KACA,aAATA,GACDkF,GAAY,kBAAM3F,KAET,YAATS,GACAmF,GAAW,2BAAS5F,EAAT,qBAInB,OACI,cAAC,IAAMmG,SAAP,UACKV,KCjBEW,MAVf,WACE,OACE,cAAC,IAAD,UACI,cAAC,EAAD,UACE,cAAC,EAAD,SCCKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlI,SAASC,eAAe,SAM1BsH,M","file":"static/js/main.0707ec47.chunk.js","sourcesContent":["import {atom} from \"recoil\";\n\nconst locationState = atom({\n    key: 'locationState',\n    default: {\n        latitude: 37.56080754022743,\n        longitude: 126.92737579814681,\n    }\n})\n\nconst keywordState = atom({\n    key: 'keywordState',\n    default: {\n        keyword: '맛집'\n    }\n})\n\nexport const mapAtoms = {\n    locationState,\n    keywordState\n}\n","import * as React from 'react';\nimport styled from \"styled-components\";\nimport {useEffect, useState} from \"react\";\nimport {useRecoilValue} from \"recoil\";\nimport {mapAtoms} from \"../recoil/atoms/mapAtoms\";\nimport \"./styles/map.css\";\n\nconst {kakao} = window\n\nconst KaKaoMap = () => {\n    const location = useRecoilValue(mapAtoms.locationState);\n    const keywordFromRN = useRecoilValue(mapAtoms.keywordState);\n    const [map, setCurrentMap] = useState();\n    const [ps, setPs] = useState();\n    const [infoWindow, setInfoWindow] = useState();\n\n    let markers = [];\n\n\n    useEffect(() => {\n        let container = document.getElementById('map');\n        if (kakao) {\n            let options = {\n                center: new kakao.maps.LatLng(location.latitude, location.longitude),\n                level: 3,\n            }\n            setCurrentMap(new kakao.maps.Map(container, options));\n            setPs(new kakao.maps.services.Places());\n            setInfoWindow(new kakao.maps.InfoWindow({zIndex: 1}))\n        }\n    }, [kakao])\n\n    useEffect(() => {\n        if (ps) {\n            searchPlaces();\n        }\n    }, [ps])\n\n    const searchPlaces = () => {\n\n        let keyword = document.getElementById('keyword').value;\n\n        if (!keyword.replace(/^\\s+|\\s+$/g, '')) {\n            alert('키워드를 입력해주세요!');\n            return false;\n        }\n\n        // 장소검색 객체를 통해 키워드로 장소검색을 요청합니다\n        ps.keywordSearch(keyword, placesSearchCB);\n    }\n\n    const placesSearchCB = (data, status, pagination, infoWindow) => {\n        if (status === kakao.maps.services.Status.OK) {\n\n            // 정상적으로 검색이 완료됐으면\n            // 검색 목록과 마커를 표출합니다\n            window.ReactNativeWebView.postMessage(\n                JSON.stringify({\n                    type: 'placeData',\n                    message: data\n                })\n            )\n            displayPlaces(data);\n\n            // 페이지 번호를 표출합니다\n            displayPagination(pagination);\n\n        } else if (status === kakao.maps.services.Status.ZERO_RESULT) {\n\n            alert('검색 결과가 존재하지 않습니다.');\n            return;\n\n        } else if (status === kakao.maps.services.Status.ERROR) {\n\n            alert('검색 결과 중 오류가 발생했습니다.');\n            return;\n\n        }\n    }\n\n    const displayPlaces = (places) => {\n\n        let listEl = document.getElementById('placesList'),\n            menuEl = document.getElementById('menu_wrap'),\n            fragment = document.createDocumentFragment(),\n            bounds = new kakao.maps.LatLngBounds(),\n            listStr = '';\n\n        // 검색 결과 목록에 추가된 항목들을 제거합니다\n        removeAllChildNods(listEl);\n\n        // 지도에 표시되고 있는 마커를 제거합니다\n        removeMarker();\n\n        for (let i = 0; i < places.length; i++) {\n\n            // 마커를 생성하고 지도에 표시합니다\n            let placePosition = new kakao.maps.LatLng(places[i].y, places[i].x),\n                marker = addMarker(placePosition, i),\n                itemEl = getListItem(i, places[i]); // 검색 결과 항목 Element를 생성합니다\n\n            // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해\n            // LatLngBounds 객체에 좌표를 추가합니다\n            bounds.extend(placePosition);\n\n            // 마커와 검색결과 항목에 mouseover 했을때\n            // 해당 장소에 인포윈도우에 장소명을 표시합니다\n            // mouseout 했을 때는 인포윈도우를 닫습니다\n            (function (marker, title) {\n                kakao.maps.event.addListener(marker, 'mouseover', function () {\n                    displayInfowindow(marker, title);\n                });\n\n                kakao.maps.event.addListener(marker, 'mouseout', function () {\n                    infoWindow.close();\n                });\n\n                itemEl.onmouseover = function () {\n                    displayInfowindow(marker, title);\n                };\n\n                itemEl.onmouseout = function () {\n                    infoWindow.close();\n                };\n            })(marker, places[i].place_name);\n\n            fragment.appendChild(itemEl);\n        }\n\n        // 검색결과 항목들을 검색결과 목록 Elemnet에 추가합니다\n        listEl.appendChild(fragment);\n        menuEl.scrollTop = 0;\n\n        // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다\n        map.setBounds(bounds);\n    }\n\n\n// 검색결과 항목을 Element로 반환하는 함수입니다\n    const getListItem = (index, places) => {\n\n        let el = document.createElement('li'),\n            itemStr = '<span class=\"markerbg marker_' + (index + 1) + '\"></span>' +\n                '<div class=\"info\">' +\n                '   <h5>' + places.place_name + '</h5>';\n\n        if (places.road_address_name) {\n            itemStr += '    <span>' + places.road_address_name + '</span>' +\n                '   <span class=\"jibun gray\">' + places.address_name + '</span>';\n        } else {\n            itemStr += '    <span>' + places.address_name + '</span>';\n        }\n\n        itemStr += '  <span class=\"tel\">' + places.phone + '</span>' +\n            '</div>';\n\n        el.innerHTML = itemStr;\n        el.className = 'item';\n\n        return el;\n    }\n\n// 마커를 생성하고 지도 위에 마커를 표시하는 함수입니다\n    const addMarker = (position, idx, title) => {\n        let imageSrc = 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png', // 마커 이미지 url, 스프라이트 이미지를 씁니다\n            imageSize = new kakao.maps.Size(36, 37),  // 마커 이미지의 크기\n            imgOptions = {\n                spriteSize: new kakao.maps.Size(36, 691), // 스프라이트 이미지의 크기\n                spriteOrigin: new kakao.maps.Point(0, (idx * 46) + 10), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\n                offset: new kakao.maps.Point(13, 37) // 마커 좌표에 일치시킬 이미지 내에서의 좌표\n            },\n            markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imgOptions),\n            marker = new kakao.maps.Marker({\n                position: position, // 마커의 위치\n                image: markerImage\n            });\n\n        marker.setMap(map); // 지도 위에 마커를 표출합니다\n        markers.push(marker);  // 배열에 생성된 마커를 추가합니다\n\n        return marker;\n    }\n\n// 지도 위에 표시되고 있는 마커를 모두 제거합니다\n    function removeMarker() {\n        for (let i = 0; i < markers.length; i++) {\n            markers[i].setMap(null);\n        }\n        markers = [];\n    }\n\n// 검색결과 목록 하단에 페이지번호를 표시는 함수입니다\n    function displayPagination(pagination) {\n        let paginationEl = document.getElementById('pagination'),\n            fragment = document.createDocumentFragment(),\n            i;\n\n        // 기존에 추가된 페이지번호를 삭제합니다\n        while (paginationEl.hasChildNodes()) {\n            paginationEl.removeChild(paginationEl.lastChild);\n        }\n\n        for (i = 1; i <= pagination.last; i++) {\n            let el = document.createElement('a');\n            el.href = \"#\";\n            el.innerHTML = i;\n\n            if (i === pagination.current) {\n                el.className = 'on';\n            } else {\n                el.onclick = (function (i) {\n                    return function () {\n                        pagination.gotoPage(i);\n                    }\n                })(i);\n            }\n\n            fragment.appendChild(el);\n        }\n        paginationEl.appendChild(fragment);\n    }\n\n// 검색결과 목록 또는 마커를 클릭했을 때 호출되는 함수입니다\n// 인포윈도우에 장소명을 표시합니다\n    const displayInfowindow = (marker, title) => {\n        let content = '<div style=\"padding:5px;z-index:1;\">' + title + '</div>';\n\n        infoWindow.setContent(content);\n        infoWindow.open(map, marker);\n    }\n\n// 검색결과 목록의 자식 Element를 제거하는 함수입니다\n    function removeAllChildNods(el) {\n        while (el.hasChildNodes()) {\n            el.removeChild(el.lastChild);\n        }\n    }\n\n    useEffect(() => {\n\n    }, [keywordFromRN, keywordFromRN])\n\n    const requestPermission = () => {\n        if (window.ReactNativeWebView) {\n            window.ReactNativeWebView.postMessage(\n                JSON.stringify({message: 'this is message from webview'})\n            )\n        }\n    }\n\n    return (\n        <Container id=\"map\">\n            <div className=\"map_wrap\">\n                <div id=\"map\" style={{height: '100%', width: '100%', position: 'relative', overflow: 'hidden'}}></div>\n\n                <div id=\"menu_wrap\" className=\"bg_white\" style={{zIndex: 20}}>\n                    <div className=\"option\">\n                        <div>\n                            <form onSubmit=\"searchPlaces(); return false;\">\n                                키워드 : <input type=\"text\" value=\"연남동 맛집\" id=\"keyword\" size=\"15\"/>\n                                <button type=\"submit\">검색하기</button>\n                            </form>\n                        </div>\n                    </div>\n                    <hr/>\n                    <ul id=\"placesList\"></ul>\n                    <div id=\"pagination\"></div>\n                </div>\n            </div>\n        </Container>\n    )\n}\n\nconst Container = styled.div`\n  width: 100vw;\n  height: 100vh;\n`;\n\nexport default KaKaoMap;\n","import React, {useEffect} from 'react';\nimport {useRecoilState} from \"recoil\";\nimport {mapAtoms} from \"../recoil/atoms/mapAtoms\";\n\nconst RNListener = ({children}) => {\n\n    const [location, setLocation] = useRecoilState(mapAtoms.locationState);\n    const [keyword, setKeyword] = useRecoilState(mapAtoms.keywordState);\n    useEffect(() => {\n        if (window.ReactNativeWebView){\n            // android\n            document.addEventListener(\"message\", listener);\n            // ios\n            window.addEventListener(\"message\", listener);\n        }\n        return () => {\n            document.removeEventListener(\"message\", listener);\n            window.removeEventListener(\"message\", listener);\n        }\n    },[])\n\n    const listener = (event) => {\n        console.log(JSON.parse(event.data));\n        const { data, type } = JSON.parse(event.data);\n        if ( type === \"Location\" ) {\n            setLocation(() => data);\n        }\n        if( type === \"Keyword\") {\n            setKeyword(() => `${data} 맛집`)\n        }\n    };\n\n    return(\n        <React.Fragment>\n            {children}\n        </React.Fragment>\n    )\n}\n\nexport default  RNListener;\n","import React from 'react';\nimport KaKaoMap from \"./components/KakaoMap\";\nimport RNListener from \"./components/RNListener\";\nimport {\n    RecoilRoot\n} from \"recoil\";\n\nfunction App() {\n  return (\n    <RecoilRoot>\n        <RNListener>\n          <KaKaoMap />\n        </RNListener>\n    </RecoilRoot>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}