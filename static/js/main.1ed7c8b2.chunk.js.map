{"version":3,"sources":["recoil/atoms/mapAtoms.js","components/KakaoMap.js","components/RNListener.js","App.js","reportWebVitals.js","index.js"],"names":["mapAtoms","locationState","atom","key","default","latitude","longitude","page","keywordState","keyword","undefined","paginationState","axios","defaults","baseURL","headers","common","process","kakao","window","Container","styled","div","KaKaoMap","activeOverlay","location","useRecoilValue","keywordFromRN","useState","map","setCurrentMap","placeData","setPlaceData","get","markers","imageSize","maps","Size","useEffect","event","addListener","setMap","ReactNativeWebView","postMessage","JSON","stringify","type","message","remove","container","document","getElementById","options","center","LatLng","level","Map","console","log","searchPlaces","useCallback","then","res","data","documents","length","mergeList","placesSearchCB","status","removeMarker","catch","err","displayPlaces","services","Status","ZERO_RESULT","alert","ERROR","places","bounds","LatLngBounds","i","placePosition","y","x","addMarker","place_name","extend","setBounds","position","idx","title","imgOptions","spriteSize","spriteOrigin","Point","offset","markerImage","createMarkerImage","marker","Marker","image","content","customOverlay","CustomOverlay","push","markerSize","imageSrc","imageOptions","MarkerImage","id","RNListener","children","useRecoilState","setLocation","setKeyword","addEventListener","listener","removeEventListener","parse","Fragment","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.1ed7c8b2.chunk.js","sourcesContent":["import {atom} from \"recoil\";\n\nconst locationState = atom({\n    key: 'locationState',\n    default: {\n        latitude: 37.56080754022743,\n        longitude: 126.92737579814681,\n        page: 1,\n    }\n})\n\nconst keywordState = atom({\n    key: 'keywordState',\n    default: {\n        keyword: undefined,\n    }\n})\n\nconst paginationState = atom({\n    key: 'paginationState',\n    default: {\n        page: 1,\n    }\n})\n\nexport const mapAtoms = {\n    locationState,\n    keywordState,\n    paginationState,\n}\n","import * as React from 'react';\nimport styled from \"styled-components\";\nimport {useCallback, useEffect, useState} from \"react\";\nimport {useRecoilState, useRecoilValue} from \"recoil\";\nimport {mapAtoms} from \"../recoil/atoms/mapAtoms\";\nimport {get} from 'lodash';\nimport \"./styles/map.css\";\nimport axios from 'axios';\n\naxios.defaults.baseURL = 'https://dapi.kakao.com'\naxios.defaults.headers.common['Authorization'] = `KakaoAK ${process.env.REACT_APP_KAKAO_LOCAL_KEY}`;\naxios.defaults.headers.common['X-Requested-With'] = 'curl';\n\nconst {kakao} = window\n\nconst KaKaoMap = () => {\n    const location = useRecoilValue(mapAtoms.locationState);\n    const keywordFromRN = useRecoilValue(mapAtoms.keywordState);\n    const [map, setCurrentMap] = useState();\n    const [placeData, setPlaceData] = useState();\n\n    const keyword = get(keywordFromRN, 'keyword');\n    // const keyword = '맛집';\n    const latitude = get(location, 'latitude');\n    const longitude = get(location, 'longitude');\n    const page = get(location, 'page');\n    let markers = [];\n    let activeOverlay;\n    const defaultImageSrc = 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png', // 마커 이미지 url, 스프라이트 이미지를 씁니다\n          imageSize = new kakao.maps.Size(36, 37);  // 마커 이미지의 크기\n\n    useEffect(() => {\n        if (map) {\n            const clearOverlay = () => {\n                activeOverlay && activeOverlay.setMap(null);\n                if (window.ReactNativeWebView) {\n                    window.ReactNativeWebView.postMessage(\n                        JSON.stringify({\n                            type: 'selectedPlace',\n                            message: null,\n                        })\n                    )\n                }\n            }\n            kakao.maps.event.addListener(map, 'click', clearOverlay);\n\n            return () => {\n                kakao.maps.event.remove();\n            }\n        }\n    },[map, activeOverlay])\n\n    useEffect(() => {\n        let container = document.getElementById('map');\n        if (kakao) {\n            let options = {\n                center: new kakao.maps.LatLng(latitude, longitude),\n                level: 3,\n            }\n            setCurrentMap(new kakao.maps.Map(container, options));\n        }\n    }, [kakao])\n\n    useEffect(() => {\n        console.log(location)\n        console.log(latitude)\n        console.log(longitude);\n        console.log(keywordFromRN)\n        console.log(keyword)\n        console.log(page);\n        if (page === 1) {\n            setPlaceData([]);\n        }\n        if(keyword && map) {\n            searchPlaces()\n        }\n    },[keywordFromRN, location, map, page])\n\n    const searchPlaces = useCallback(() => {\n        axios.get(`/v2/local/search/keyword.json?query=${keyword}&y=${latitude}&x=${longitude}&radius=20000&page=${page}&sort=distance`,\n        ).then((res) => {\n            if (res.data.documents.length > 0) {\n                const mergeList = [...placeData, ...res.data.documents];\n                setPlaceData(mergeList);\n                placesSearchCB(mergeList, res.status)\n                if (res.data.documents.length < 15) {\n                    if (window.ReactNativeWebView) {\n                        window.ReactNativeWebView.postMessage(\n                            JSON.stringify({\n                                type: 'lastPage',\n                            })\n                        )\n                    }\n                }\n            } else {\n                removeMarker();\n                if (window.ReactNativeWebView) {\n                    window.ReactNativeWebView.postMessage(\n                        JSON.stringify({\n                            type: 'placeData',\n                            message: [],\n                        })\n                    )\n                }\n            }\n        }).catch(err => console.log(err))\n    },[keyword, latitude, longitude, page]);\n\n    const placesSearchCB = (data, status) => {\n        if (status === 200) {\n\n            // 정상적으로 검색이 완료됐으면\n            // 검색 목록과 마커를 표출합니다\n            if (window.ReactNativeWebView) {\n                window.ReactNativeWebView.postMessage(\n                    JSON.stringify({\n                        type: 'placeData',\n                        message: data\n                    })\n                )\n            }\n            displayPlaces(data);\n\n        } else if (status === kakao.maps.services.Status.ZERO_RESULT) {\n\n            alert('검색 결과가 존재하지 않습니다.');\n            return;\n\n        } else if (status === kakao.maps.services.Status.ERROR) {\n\n            alert('검색 결과 중 오류가 발생했습니다.');\n            return;\n\n        }\n    }\n\n    const displayPlaces = (places) => {\n\n        let bounds = new kakao.maps.LatLngBounds();\n\n        // 지도에 표시되고 있는 마커를 제거합니다\n        removeMarker();\n        for (let i = 0; i < places.length; i++) {\n\n            // 마커를 생성하고 지도에 표시합니다\n            let placePosition = new kakao.maps.LatLng(places[i].y, places[i].x);\n            let marker = addMarker(placePosition, i, places[i]?.place_name);\n\n            // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해\n            // LatLngBounds 객체에 좌표를 추가합니다\n            bounds.extend(placePosition);\n        }\n\n        // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다\n        map.setBounds(bounds);\n    }\n\n// 마커를 생성하고 지도 위에 마커를 표시하는 함수입니다\n    const addMarker = (position, idx, title) => {\n        const imgOptions = {\n                spriteSize: new kakao.maps.Size(36, 691), // 스프라이트 이미지의 크기\n                spriteOrigin: new kakao.maps.Point(0, (idx * 46) + 10), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\n                offset: new kakao.maps.Point(13, 37) // 마커 좌표에 일치시킬 이미지 내에서의 좌표\n            },\n            markerImage = createMarkerImage(imageSize, defaultImageSrc, imgOptions),\n            marker = new kakao.maps.Marker({\n                position: position, // 마커의 위치\n                image: markerImage,\n            });\n\n        marker.setMap(map); // 지도 위에 마커를 표출합니다\n        const content = `<div class =\"label\"><span class=\"left\"></span><span class=\"center\">${title}</span><span class=\"right\"></span></div>`;\n\n        const customOverlay = new kakao.maps.CustomOverlay({\n            position: position,\n            content: content\n        });\n\n        kakao.maps.event.addListener(marker, 'click', () => {\n            // 마커 위에 인포윈도우를 표시합니다\n            if (window.ReactNativeWebView) {\n                window.ReactNativeWebView.postMessage(\n                    JSON.stringify({\n                        type: 'selectedPlace',\n                        message: idx,\n                    })\n                )\n            }\n            activeOverlay && activeOverlay.setMap(null);\n            customOverlay.setMap(map);\n            activeOverlay = customOverlay;\n\n        });\n\n        markers.push(marker);  // 배열에 생성된 마커를 추가합니다\n\n        return marker;\n    }\n\n    // 지도 위에 표시되고 있는 마커를 모두 제거합니다\n    const removeMarker = () => {\n        for (let i = 0; i < markers.length; i++) {\n            markers[i].setMap(null);\n        }\n        markers = [];\n    }\n\n    const createMarkerImage = (markerSize, imageSrc, imageOptions) => {\n        const markerImage = new kakao.maps.MarkerImage(\n            imageSrc, // 스프라이트 마커 이미지 URL\n            markerSize, // 마커의 크기\n            imageOptions,\n        );\n\n        return markerImage;\n    }\n\n    return (\n        <Container id=\"map\">\n        </Container>\n    )\n}\n\nconst Container = styled.div`\n  width: 100vw;\n  height: 100vh;\n`;\n\nexport default KaKaoMap;\n","import React, {useEffect} from 'react';\nimport {useRecoilState} from \"recoil\";\nimport {mapAtoms} from \"../recoil/atoms/mapAtoms\";\nimport {get} from \"lodash\";\n\nconst RNListener = ({children}) => {\n\n    const [location, setLocation] = useRecoilState(mapAtoms.locationState);\n    const [keyword, setKeyword] = useRecoilState(mapAtoms.keywordState);\n    useEffect(() => {\n        if (window.ReactNativeWebView) {\n            // android\n            document.addEventListener(\"message\", listener);\n            // ios\n            window.addEventListener(\"message\", listener);\n        }\n        return () => {\n            document.removeEventListener(\"message\", listener);\n            window.removeEventListener(\"message\", listener);\n        }\n    }, [])\n\n    const listener = (event) => {\n        console.log(JSON.parse(event.data));\n        const {data, type} = JSON.parse(event.data);\n        if (type === \"Location\") {\n            setLocation(data);\n        }\n        if (type === \"Keyword\") {\n            console.log(data.keyword);\n            if (data.keyword === '') {\n                setKeyword({keyword: '맛집'});\n            } else {\n                setKeyword({keyword: `${data.keyword} 맛집`});\n            }\n        }\n    };\n\n    return (\n        <React.Fragment>\n            {children}\n        </React.Fragment>\n    )\n}\n\nexport default RNListener;\n","import React from 'react';\nimport KaKaoMap from \"./components/KakaoMap\";\nimport RNListener from \"./components/RNListener\";\nimport {\n    RecoilRoot\n} from \"recoil\";\n\nfunction App() {\n  return (\n    <RecoilRoot>\n        <RNListener>\n          <KaKaoMap />\n        </RNListener>\n    </RecoilRoot>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}