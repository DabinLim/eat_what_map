{"version":3,"sources":["recoil/atoms/mapAtoms.js","components/KakaoMap.js","components/RNListener.js","App.js","reportWebVitals.js","index.js"],"names":["mapAtoms","locationState","atom","key","default","latitude","longitude","keywordState","keyword","undefined","axios","defaults","baseURL","headers","common","process","kakao","window","Container","styled","div","KaKaoMap","activeOverlay","location","useRecoilValue","keywordFromRN","useState","map","setCurrentMap","get","markers","imageSize","maps","Size","useEffect","event","addListener","setMap","ReactNativeWebView","postMessage","JSON","stringify","type","message","remove","container","document","getElementById","options","center","LatLng","level","Map","console","log","searchPlaces","then","res","data","documents","length","sortByDistance","sort","a","b","distance","placesSearchCB","status","catch","err","displayPlaces","services","Status","ZERO_RESULT","alert","ERROR","places","bounds","LatLngBounds","removeMarker","i","placePosition","y","x","addMarker","place_name","extend","setBounds","querySelectorAll","forEach","e","w","offsetWidth","ml","parentElement","style","top","left","marginLeft","width","previousSibling","display","border","background","position","idx","title","imgOptions","spriteSize","spriteOrigin","Point","offset","markerImage","createMarkerImage","marker","Marker","image","content","customOverlay","CustomOverlay","push","markerSize","imageSrc","imageOptions","MarkerImage","id","RNListener","children","useRecoilState","setLocation","setKeyword","addEventListener","listener","removeEventListener","parse","Fragment","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.405a5666.chunk.js","sourcesContent":["import {atom} from \"recoil\";\n\nconst locationState = atom({\n    key: 'locationState',\n    default: {\n        latitude: 37.56080754022743,\n        longitude: 126.92737579814681,\n    }\n})\n\nconst keywordState = atom({\n    key: 'keywordState',\n    default: {\n        keyword: undefined\n    }\n})\n\nexport const mapAtoms = {\n    locationState,\n    keywordState\n}\n","import * as React from 'react';\nimport styled from \"styled-components\";\nimport {useEffect, useState} from \"react\";\nimport {useRecoilState, useRecoilValue} from \"recoil\";\nimport {mapAtoms} from \"../recoil/atoms/mapAtoms\";\nimport {get} from 'lodash';\nimport \"./styles/map.css\";\nimport axios from 'axios';\n\naxios.defaults.baseURL = 'https://dapi.kakao.com'\naxios.defaults.headers.common['Authorization'] = `KakaoAK ${process.env.REACT_APP_KAKAO_LOCAL_KEY}`;\naxios.defaults.headers.common['X-Requested-With'] = 'curl';\n\nconst {kakao} = window\n\nconst KaKaoMap = () => {\n    const location = useRecoilValue(mapAtoms.locationState);\n    const keywordFromRN = useRecoilValue(mapAtoms.keywordState);\n    const [map, setCurrentMap] = useState();\n\n    // const keyword = get(keywordFromRN, 'keyword');\n    const keyword = '맛집';\n    const latitude = get(location, 'latitude');\n    const longitude = get(location, 'longitude');\n    let markers = [];\n    let activeOverlay;\n    const defaultImageSrc = 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png', // 마커 이미지 url, 스프라이트 이미지를 씁니다\n          imageSize = new kakao.maps.Size(36, 37);  // 마커 이미지의 크기\n\n    useEffect(() => {\n        if (map) {\n            const clearOverlay = () => {\n                activeOverlay && activeOverlay.setMap(null);\n                if (window.ReactNativeWebView) {\n                    window.ReactNativeWebView.postMessage(\n                        JSON.stringify({\n                            type: 'selectedPlace',\n                            message: null,\n                        })\n                    )\n                }\n            }\n            kakao.maps.event.addListener(map, 'click', clearOverlay);\n\n            return () => {\n                kakao.maps.event.remove();\n            }\n        }\n    },[map])\n\n    useEffect(() => {\n        let container = document.getElementById('map');\n        if (kakao) {\n            let options = {\n                center: new kakao.maps.LatLng(latitude, longitude),\n                level: 3,\n            }\n            setCurrentMap(new kakao.maps.Map(container, options));\n        }\n    }, [kakao])\n\n    useEffect(() => {\n        console.log(location)\n        console.log(latitude)\n        console.log(longitude);\n        console.log(keywordFromRN)\n        console.log(keyword)\n        if(keyword && map) {\n            searchPlaces()\n        }\n    },[keywordFromRN, location, map])\n\n    const searchPlaces = () => {\n        axios.get(`/v2/local/search/keyword.json?query=${keyword}&y=${latitude}&x=${longitude}&radius=10000`,\n        ).then((res) => {\n            if (res.data.documents.length > 0) {\n                const sortByDistance = res.data.documents.sort(function(a, b) { // 오름차순\n                    return a.distance - b.distance;\n                });\n                console.log(sortByDistance)\n                placesSearchCB(res.data.documents, res.status)\n            } else {\n                if (window.ReactNativeWebView) {\n                    window.ReactNativeWebView.postMessage(\n                        JSON.stringify({\n                            type: 'placeData',\n                            message: [],\n                        })\n                    )\n                }\n            }\n        }).catch(err => console.log(err))\n    }\n\n    const placesSearchCB = (data, status) => {\n        if (status === 200) {\n\n            // 정상적으로 검색이 완료됐으면\n            // 검색 목록과 마커를 표출합니다\n            if (window.ReactNativeWebView) {\n                window.ReactNativeWebView.postMessage(\n                    JSON.stringify({\n                        type: 'placeData',\n                        message: data\n                    })\n                )\n            }\n            displayPlaces(data);\n\n        } else if (status === kakao.maps.services.Status.ZERO_RESULT) {\n\n            alert('검색 결과가 존재하지 않습니다.');\n            return;\n\n        } else if (status === kakao.maps.services.Status.ERROR) {\n\n            alert('검색 결과 중 오류가 발생했습니다.');\n            return;\n\n        }\n    }\n\n    const displayPlaces = (places) => {\n\n        let bounds = new kakao.maps.LatLngBounds();\n\n        // 지도에 표시되고 있는 마커를 제거합니다\n        removeMarker();\n        for (let i = 0; i < places.length; i++) {\n\n            // 마커를 생성하고 지도에 표시합니다\n            let placePosition = new kakao.maps.LatLng(places[i].y, places[i].x);\n            let marker = addMarker(placePosition, i, places[i]?.place_name);\n\n            // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해\n            // LatLngBounds 객체에 좌표를 추가합니다\n            bounds.extend(placePosition);\n        }\n\n        // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다\n        map.setBounds(bounds);\n        const infoTitle = document.querySelectorAll('.info-title');\n        infoTitle.forEach(function(e) {\n            const w = e.offsetWidth + 10;\n            const ml = w/2;\n            e.parentElement.style.top = \"82px\";\n            e.parentElement.style.left = \"50%\";\n            e.parentElement.style.marginLeft = -ml+\"px\";\n            e.parentElement.style.width = w+\"px\";\n            e.parentElement.previousSibling.style.display = \"none\";\n            e.parentElement.parentElement.style.border = \"0px\";\n            e.parentElement.parentElement.style.background = \"unset\";\n        });\n    }\n\n// 마커를 생성하고 지도 위에 마커를 표시하는 함수입니다\n    const addMarker = (position, idx, title) => {\n        const imgOptions = {\n                spriteSize: new kakao.maps.Size(36, 691), // 스프라이트 이미지의 크기\n                spriteOrigin: new kakao.maps.Point(0, (idx * 46) + 10), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\n                offset: new kakao.maps.Point(13, 37) // 마커 좌표에 일치시킬 이미지 내에서의 좌표\n            },\n            markerImage = createMarkerImage(imageSize, defaultImageSrc, imgOptions),\n            marker = new kakao.maps.Marker({\n                position: position, // 마커의 위치\n                image: markerImage,\n            });\n\n        marker.setMap(map); // 지도 위에 마커를 표출합니다\n        const content = `<div class =\"label\"><span class=\"left\"></span><span class=\"center\">${title}</span><span class=\"right\"></span></div>`;\n\n        const customOverlay = new kakao.maps.CustomOverlay({\n            position: position,\n            content: content\n        });\n\n        kakao.maps.event.addListener(marker, 'click', () => {\n            // 마커 위에 인포윈도우를 표시합니다\n            if (window.ReactNativeWebView) {\n                window.ReactNativeWebView.postMessage(\n                    JSON.stringify({\n                        type: 'selectedPlace',\n                        message: idx,\n                    })\n                )\n            }\n            activeOverlay && activeOverlay.setMap(null);\n            customOverlay.setMap(map);\n            activeOverlay = customOverlay;\n\n        });\n\n        markers.push(marker);  // 배열에 생성된 마커를 추가합니다\n\n        return marker;\n    }\n\n    // 지도 위에 표시되고 있는 마커를 모두 제거합니다\n    const removeMarker = () => {\n        for (let i = 0; i < markers.length; i++) {\n            markers[i].setMap(null);\n        }\n        markers = [];\n    }\n\n    const createMarkerImage = (markerSize, imageSrc, imageOptions) => {\n        const markerImage = new kakao.maps.MarkerImage(\n            imageSrc, // 스프라이트 마커 이미지 URL\n            markerSize, // 마커의 크기\n            imageOptions,\n        );\n\n        return markerImage;\n    }\n\n    return (\n        <Container id=\"map\">\n        </Container>\n    )\n}\n\nconst Container = styled.div`\n  width: 100vw;\n  height: 100vh;\n`;\n\nexport default KaKaoMap;\n","import React, {useEffect} from 'react';\nimport {useRecoilState} from \"recoil\";\nimport {mapAtoms} from \"../recoil/atoms/mapAtoms\";\n\nconst RNListener = ({children}) => {\n\n    const [location, setLocation] = useRecoilState(mapAtoms.locationState);\n    const [keyword, setKeyword] = useRecoilState(mapAtoms.keywordState);\n    useEffect(() => {\n        if (window.ReactNativeWebView) {\n            // android\n            document.addEventListener(\"message\", listener);\n            // ios\n            window.addEventListener(\"message\", listener);\n        }\n        return () => {\n            document.removeEventListener(\"message\", listener);\n            window.removeEventListener(\"message\", listener);\n        }\n    }, [])\n\n    const listener = (event) => {\n        console.log(JSON.parse(event.data));\n        const {data, type} = JSON.parse(event.data);\n        if (type === \"Location\") {\n            setLocation(data);\n        }\n        if (type === \"Keyword\") {\n            console.log(data.keyword);\n            setKeyword({keyword: `${data.keyword} 맛집`})\n        }\n    };\n\n    return (\n        <React.Fragment>\n            {children}\n        </React.Fragment>\n    )\n}\n\nexport default RNListener;\n","import React from 'react';\nimport KaKaoMap from \"./components/KakaoMap\";\nimport RNListener from \"./components/RNListener\";\nimport {\n    RecoilRoot\n} from \"recoil\";\n\nfunction App() {\n  return (\n    <RecoilRoot>\n        <RNListener>\n          <KaKaoMap />\n        </RNListener>\n    </RecoilRoot>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}