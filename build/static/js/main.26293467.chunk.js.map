{"version":3,"sources":["recoil/atoms/mapAtoms.js","components/KakaoMap.js","components/RNListener.js","App.js","reportWebVitals.js","index.js"],"names":["mapAtoms","locationState","atom","key","default","latitude","undefined","longitude","keywordState","keyword","axios","defaults","baseURL","headers","common","process","kakao","window","Container","styled","div","KaKaoMap","location","useRecoilValue","keywordFromRN","useState","map","setCurrentMap","get","markers","useEffect","container","document","getElementById","options","center","maps","LatLng","level","Map","console","log","searchPlaces","then","res","sortByDistance","data","documents","sort","a","b","distance","placesSearchCB","status","catch","err","ReactNativeWebView","postMessage","JSON","stringify","type","message","displayPlaces","services","Status","ZERO_RESULT","alert","ERROR","places","bounds","LatLngBounds","i","length","setMap","removeMarker","placePosition","y","x","addMarker","extend","setBounds","position","idx","title","imageSize","Size","imgOptions","spriteSize","spriteOrigin","Point","offset","markerImage","MarkerImage","marker","Marker","image","push","id","RNListener","children","useRecoilState","setLocation","setKeyword","addEventListener","listener","removeEventListener","event","parse","Fragment","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.26293467.chunk.js","sourcesContent":["import {atom} from \"recoil\";\n\nconst locationState = atom({\n    key: 'locationState',\n    default: {\n        latitude: undefined,\n        longitude: undefined,\n    }\n})\n\nconst keywordState = atom({\n    key: 'keywordState',\n    default: {\n        keyword: undefined\n    }\n})\n\nexport const mapAtoms = {\n    locationState,\n    keywordState\n}\n","import * as React from 'react';\nimport styled from \"styled-components\";\nimport {useEffect, useState} from \"react\";\nimport {useRecoilState, useRecoilValue} from \"recoil\";\nimport {mapAtoms} from \"../recoil/atoms/mapAtoms\";\nimport {get} from 'lodash';\nimport \"./styles/map.css\";\nimport axios from 'axios';\n\naxios.defaults.baseURL = 'https://dapi.kakao.com'\naxios.defaults.headers.common['Authorization'] = `KakaoAK ${process.env.REACT_APP_KAKAO_LOCAL_KEY}`;\naxios.defaults.headers.common['X-Requested-With'] = 'curl';\n\nconst {kakao} = window\n\nconst KaKaoMap = () => {\n    const location = useRecoilValue(mapAtoms.locationState);\n    const keywordFromRN = useRecoilValue(mapAtoms.keywordState);\n    const [map, setCurrentMap] = useState();\n\n    const keyword = get(keywordFromRN, 'keyword');\n    const latitude = get(location, 'latitude');\n    const longitude = get(location, 'longitude');\n    let markers = [];\n\n    useEffect(() => {\n        let container = document.getElementById('map');\n        if (kakao) {\n            let options = {\n                center: new kakao.maps.LatLng(location.latitude, location.longitude),\n                level: 3,\n            }\n            setCurrentMap(new kakao.maps.Map(container, options));\n        }\n    }, [kakao, location])\n\n    useEffect(() => {\n        console.log(location)\n        console.log(latitude)\n        console.log(longitude);\n        console.log(keywordFromRN)\n        console.log(keyword)\n        if(keyword && latitude && longitude, map) {\n            searchPlaces()\n        }\n    },[location, keywordFromRN])\n\n    const searchPlaces = () => {\n        axios.get(`/v2/local/search/keyword.json?query=${keyword}&y=${latitude}&x=${longitude}&radius=10000`,\n        ).then((res) => {\n            const sortByDistance = res.data.documents.sort(function(a, b) { // 오름차순\n                return a.distance - b.distance;\n            });\n            console.log(sortByDistance)\n            placesSearchCB(res.data.documents, res.status)\n        }).catch(err => console.log(err))\n    }\n\n    const placesSearchCB = (data, status) => {\n        if (status === 200) {\n\n            // 정상적으로 검색이 완료됐으면\n            // 검색 목록과 마커를 표출합니다\n            if (window.ReactNativeWebView) {\n                window.ReactNativeWebView.postMessage(\n                    JSON.stringify({\n                        type: 'placeData',\n                        message: data\n                    })\n                )\n            }\n            displayPlaces(data);\n\n        } else if (status === kakao.maps.services.Status.ZERO_RESULT) {\n\n            alert('검색 결과가 존재하지 않습니다.');\n            return;\n\n        } else if (status === kakao.maps.services.Status.ERROR) {\n\n            alert('검색 결과 중 오류가 발생했습니다.');\n            return;\n\n        }\n    }\n\n    const displayPlaces = (places) => {\n\n        let bounds = new kakao.maps.LatLngBounds();\n\n        // 지도에 표시되고 있는 마커를 제거합니다\n        removeMarker();\n        for (let i = 0; i < places.length; i++) {\n\n            // 마커를 생성하고 지도에 표시합니다\n            let placePosition = new kakao.maps.LatLng(places[i].y, places[i].x);\n            let marker = addMarker(placePosition, i);\n\n            // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해\n            // LatLngBounds 객체에 좌표를 추가합니다\n            bounds.extend(placePosition);\n        }\n\n        // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다\n        map.setBounds(bounds);\n    }\n\n// 마커를 생성하고 지도 위에 마커를 표시하는 함수입니다\n    const addMarker = (position, idx, title) => {\n        let imageSrc = 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png', // 마커 이미지 url, 스프라이트 이미지를 씁니다\n            imageSize = new kakao.maps.Size(36, 37),  // 마커 이미지의 크기\n            imgOptions = {\n                spriteSize: new kakao.maps.Size(36, 691), // 스프라이트 이미지의 크기\n                spriteOrigin: new kakao.maps.Point(0, (idx * 46) + 10), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\n                offset: new kakao.maps.Point(13, 37) // 마커 좌표에 일치시킬 이미지 내에서의 좌표\n            },\n            markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imgOptions),\n            marker = new kakao.maps.Marker({\n                position: position, // 마커의 위치\n                image: markerImage\n            });\n\n        marker.setMap(map); // 지도 위에 마커를 표출합니다\n        markers.push(marker);  // 배열에 생성된 마커를 추가합니다\n\n        return marker;\n    }\n\n// 지도 위에 표시되고 있는 마커를 모두 제거합니다\n    function removeMarker() {\n        for (let i = 0; i < markers.length; i++) {\n            markers[i].setMap(null);\n        }\n        markers = [];\n    }\n\n    return (\n        <Container id=\"map\">\n        </Container>\n    )\n}\n\nconst Container = styled.div`\n  width: 100vw;\n  height: 100vh;\n`;\n\nexport default KaKaoMap;\n","import React, {useEffect} from 'react';\nimport {useRecoilState} from \"recoil\";\nimport {mapAtoms} from \"../recoil/atoms/mapAtoms\";\n\nconst RNListener = ({children}) => {\n\n    const [location, setLocation] = useRecoilState(mapAtoms.locationState);\n    const [keyword, setKeyword] = useRecoilState(mapAtoms.keywordState);\n    useEffect(() => {\n        if (window.ReactNativeWebView) {\n            // android\n            document.addEventListener(\"message\", listener);\n            // ios\n            window.addEventListener(\"message\", listener);\n        }\n        return () => {\n            document.removeEventListener(\"message\", listener);\n            window.removeEventListener(\"message\", listener);\n        }\n    }, [])\n\n    const listener = (event) => {\n        console.log(JSON.parse(event.data));\n        const {data, type} = JSON.parse(event.data);\n        if (type === \"Location\") {\n            setLocation(data);\n        }\n        if (type === \"Keyword\") {\n            console.log(data.keyword);\n            setKeyword({keyword: `${data.keyword} 맛집`})\n        }\n    };\n\n    return (\n        <React.Fragment>\n            {children}\n        </React.Fragment>\n    )\n}\n\nexport default RNListener;\n","import React from 'react';\nimport KaKaoMap from \"./components/KakaoMap\";\nimport RNListener from \"./components/RNListener\";\nimport {\n    RecoilRoot\n} from \"recoil\";\n\nfunction App() {\n  return (\n    <RecoilRoot>\n        <RNListener>\n          <KaKaoMap />\n        </RNListener>\n    </RecoilRoot>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}