{"version":3,"sources":["recoil/atoms/mapAtoms.js","components/KakaoMap.js","components/RNListener.js","App.js","reportWebVitals.js","index.js"],"names":["mapAtoms","locationState","atom","key","default","latitude","longitude","kakao","window","Container","styled","div","KaKaoMap","useRecoilState","location","useEffect","container","document","getElementById","options","center","maps","LatLng","level","Map","requestPermission","ReactNativeWebView","postMessage","JSON","stringify","message","id","RNListener","children","setLocation","addEventListener","listener","removeEventListener","event","console","log","parse","data","type","Fragment","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"yOAUaA,EAAW,CACpBC,cATkBC,YAAK,CACvBC,IAAK,gBACLC,QAAS,CACLC,SAAU,kBACVC,UAAW,uB,OCAXC,EAAUC,OAAVD,MAiCFE,EAAYC,IAAOC,IAAV,+DAKAC,EApCE,WAAO,IAAD,EACaC,YAAeb,EAASC,eADrC,mBACZa,EADY,UAGnBC,qBAAU,WACN,IAAIC,EAAYC,SAASC,eAAe,OACpCC,EAAU,CACVC,OAAQ,IAAIb,EAAMc,KAAKC,OAAOR,EAAST,SAAUS,EAASR,WAC1DiB,MAAO,GAED,IAAIhB,EAAMc,KAAKG,IAAIR,EAAWG,KAC1C,CAACL,IAEHC,qBAAU,WACNU,MACF,IAEF,IAAMA,EAAoB,WACnBjB,OAAOkB,oBACNlB,OAAOkB,mBAAmBC,YACtBC,KAAKC,UAAU,CAACC,QAAS,mCAKrC,OACI,cAACrB,EAAD,CAAWsB,GAAG,SCGNC,EAhCG,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,EAECpB,YAAeb,EAASC,eAFzB,mBAEdiC,GAFc,WAI/BnB,qBAAU,WAON,OANIP,OAAOkB,qBAEPT,SAASkB,iBAAiB,UAAWC,GAErC5B,OAAO2B,iBAAiB,UAAWC,IAEhC,WACHnB,SAASoB,oBAAoB,UAAWD,GACxC5B,OAAO6B,oBAAoB,UAAWD,MAE5C,IAEF,IAAMA,EAAW,SAACE,GACdC,QAAQC,IAAIZ,KAAKa,MAAMH,EAAMI,OADL,MAEDd,KAAKa,MAAMH,EAAMI,MAAhCA,EAFgB,EAEhBA,KACM,aAHU,EAEVC,MAEVT,GAAY,kBAAIQ,MAIxB,OACI,cAAC,IAAME,SAAP,UACKX,KCdEY,MAVf,WACE,OACE,cAAC,IAAD,UACI,cAAC,EAAD,UACE,cAAC,EAAD,SCCKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxC,SAASC,eAAe,SAM1B4B,M","file":"static/js/main.01baa54d.chunk.js","sourcesContent":["import {atom} from \"recoil\";\n\nconst locationState = atom({\n    key: 'locationState',\n    default: {\n        latitude: 37.56080754022743,\n        longitude: 126.92737579814681,\n    }\n})\n\nexport const mapAtoms = {\n    locationState,\n}\n","import * as React from 'react';\nimport styled from \"styled-components\";\nimport {useEffect} from \"react\";\nimport {useRecoilState} from \"recoil\";\nimport {mapAtoms} from \"../recoil/atoms/mapAtoms\";\n\nconst { kakao } = window\n\nconst KaKaoMap = () => {\n    const [location, setLocation] = useRecoilState(mapAtoms.locationState);\n\n    useEffect(() => {\n        let container = document.getElementById('map');\n        let options = {\n            center: new kakao.maps.LatLng(location.latitude, location.longitude),\n            level: 3,\n        }\n        let map = new kakao.maps.Map(container, options)\n    },[location])\n\n    useEffect(() => {\n        requestPermission();\n    },[])\n\n    const requestPermission = () => {\n        if(window.ReactNativeWebView) {\n            window.ReactNativeWebView.postMessage(\n                JSON.stringify({message: 'this is message from webview'})\n            )\n        }\n    }\n\n    return(\n        <Container id=\"map\">\n\n        </Container>\n    )\n}\n\nconst Container = styled.div`\n  width: 100vw;\n  height: 100vh;\n`;\n\nexport default KaKaoMap;\n","import React, {useEffect} from 'react';\nimport {useRecoilState} from \"recoil\";\nimport {mapAtoms} from \"../recoil/atoms/mapAtoms\";\n\nconst RNListener = ({children}) => {\n\n    const [location, setLocation] = useRecoilState(mapAtoms.locationState);\n\n    useEffect(() => {\n        if (window.ReactNativeWebView){\n            // android\n            document.addEventListener(\"message\", listener);\n            // ios\n            window.addEventListener(\"message\", listener);\n        }\n        return () => {\n            document.removeEventListener(\"message\", listener);\n            window.removeEventListener(\"message\", listener);\n        }\n    },[])\n\n    const listener = (event) => {\n        console.log(JSON.parse(event.data));\n        const { data, type } = JSON.parse(event.data);\n        if ( type === \"Location\" ) {\n            setLocation(()=>data);\n        }\n    };\n\n    return(\n        <React.Fragment>\n            {children}\n        </React.Fragment>\n    )\n}\n\nexport default  RNListener;\n","import React from 'react';\nimport KaKaoMap from \"./components/KakaoMap\";\nimport RNListener from \"./components/RNListener\";\nimport {\n    RecoilRoot\n} from \"recoil\";\n\nfunction App() {\n  return (\n    <RecoilRoot>\n        <RNListener>\n          <KaKaoMap />\n        </RNListener>\n    </RecoilRoot>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}